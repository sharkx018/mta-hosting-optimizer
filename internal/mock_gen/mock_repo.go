// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/init.go

// Package mock_usecase is a generated GoMock package.
package mock_gen

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/mta-hosting-optimizer/internal/entity"
)

// MockIpConfigResource is a mock of IpConfigResource interface.
type MockIpConfigResource struct {
	ctrl     *gomock.Controller
	recorder *MockIpConfigResourceMockRecorder
}

// MockIpConfigResourceMockRecorder is the mock recorder for MockIpConfigResource.
type MockIpConfigResourceMockRecorder struct {
	mock *MockIpConfigResource
}

// NewMockIpConfigResource creates a new mock instance.
func NewMockIpConfigResource(ctrl *gomock.Controller) *MockIpConfigResource {
	mock := &MockIpConfigResource{ctrl: ctrl}
	mock.recorder = &MockIpConfigResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIpConfigResource) EXPECT() *MockIpConfigResourceMockRecorder {
	return m.recorder
}

// GetIPConfigData mocks base method.
func (m *MockIpConfigResource) GetIPConfigData(ctx context.Context) (entity.MockServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPConfigData", ctx)
	ret0, _ := ret[0].(entity.MockServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPConfigData indicates an expected call of GetIPConfigData.
func (mr *MockIpConfigResourceMockRecorder) GetIPConfigData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPConfigData", reflect.TypeOf((*MockIpConfigResource)(nil).GetIPConfigData), ctx)
}
